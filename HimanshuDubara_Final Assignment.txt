Q2.class cust:
    cotype=[]
    ctype=[]
    conum=[]
    def __init__(self,ttype,olist=[],onume=[] ):
        self.ctype=ttype
        self.cotype=olist
        self.conum=onume
    def offer(self):
        ns1=0
        np3=0
        if 'P3' in self.cotype and 'S1' in self.cotype:
            for item in self.cotype:
                if item=='P3':
                    np3= int(self.cotype.index(item))
                if item=='S1':
                    ns1=int(self.cotype.index(item))
            fd=0
            if int(self.conum[np3])>int(self.conum[ns1]):
                fd=int(self.conum[ns1])
            else:
                fd=int(self.conum[np3])
            print('\n Congratulations!!!\n You have won',fd,'free Lemonades',sep=' ')


    def bill(self):
        sum=0
        y=0
        t=0
        print('\nCustomer type:\n', self.ctype)
        print('\nItems bought:\n')
        for r in self.cotype:
            t= self.cotype.index(r)
            print(r,self.conum[t],sep="x")
        for x in self.cotype:
            y = self.cotype.index(x)
            if x=='P1':
                sum=sum+150*int(self.conum[y])
            if x=='P2':
                sum=sum+250*int(self.conum[y])
            if x=='P3':
                sum=sum+400*int(self.conum[y])
            if x=='S1':
                sum=sum+280*int(self.conum[y])
            if x=='S2':
                sum=sum+180*int(self.conum[y])
            if x=='B1':
                sum=sum+90*int(self.conum[y])
            if x=='B2':
                sum=sum+60*int(self.conum[y])
        print('\nPrices:\nPizza:\n P1.Margherita: 150\n P2.Veggie Delight: 250\n P3.Chicken Sausage: 400\nSides:\n S1.Chicken Nuggets: 280\n S2.Garlic Bread: 180\nBeverages:\n B1.Coke: 90\n B2.Lemonade: 60')
        print('\nTotal=',sum)






print('Welcome to Pizza Hut',end='\n')
print('\nWould you like to take away or dine in?')
ctype= input()
print('\nMenu:\nPizza:\n P1.Margherita: 150\n P2.Veggie Delight: 250\n P3.Chicken Sausage: 400\nSides:\n S1.Chicken Nuggets: 280\n S2.Garlic Bread: 180\nBeverages:\n B1.Coke: 90\n B2.Lemonade: 60')
print('\nSpecial Offer of the day!!\n Buy a Chicken Sausage Pizza and Chicken Nuggets and you get a Lemonade free(Only if you have not ordered lemonade0')
print('\nGive your Order as per the code followed by the quantity')
otype=[]
onum=[]
c='Y'
while c=='Y':
    otyp=input()
    onu=input()
    otype.append(otyp)
    onum.append(onu)
    print('\n Anything else(Y/N)?\n')
    c=input()
print(ctype,otype,onum)
c= cust(ctype,otype,onum)
print(c.conum,c.ctype,c.cotype)
c.bill()
c.offer()

Q3.

def hcf(a,b):
	if(b==0):
		return a
	else:
		return hcf(b,a%b)

a = 1331
b= 44


print ("The gcd of 1331 and 44 is : ",end="")
print (hcf(1331,44))

Q4.OUTPUT
[0, 1]
[3, 2, 1, 0, 1, 4]
[0, 1, 0, 1, 4]
Explanation:
range() function returns whole numbers for 0 to the argument provided in offsets of 1 excluding the argument provided if only one argument is provided,i.e=offset and start are default parameters
gfg() has a default parameter l whose default value is an empty list. Therefore it becomes an empty list when onlyx is provided while at other times it takes whatever list is pushed to be l.

Q5.for i in [1,2,3,4,5]:
    print('\n')
    for j in range(0,5-i,1):
        print('  ',end='')
    for k in range(1,2*i,1):
        print('*',end=" ")